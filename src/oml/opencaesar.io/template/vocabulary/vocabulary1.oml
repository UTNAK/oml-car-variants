@dc:title "Example Vocabulary"
@dc:creator "Example Company"
@dc:rights "Copyright 2019, by Example Company"
vocabulary <http://opencaesar.io/template/vocabulary/vocabulary1#> as vocabulary1 {

	extends <http://purl.org/dc/elements/1.1/> as dc

	extends <http://bipm.org/jcgm/vim4#> as vim4

	uses <http://iso.org/iso-80000-3.4#> as iso-80000-3.4

	extends <http://imce.jpl.nasa.gov/foundation/mission#> as mission

	uses <http://opencaesar.io/template/description/metrology#> as metrology-description

extends <http://www.w3.org/2001/XMLSchema#> as xsd
extends <http://www.w3.org/2003/11/swrlb#> as swrlb
extends <http://imce.jpl.nasa.gov/foundation/base#> as base

	concept Car < mission:Component [
		// restricts hasEngine to exactly 1
		restricts hasEngine to min 1
	]

	concept Engine < mission:Component, vim4:Object [
		restricts hasDisplacement to min 1
	]


	concept Navigation < mission:Component[
		restricts hasNaviData to min 1
	]

	concept Navi < Navigation
	



	



	concept CX-8 < Car [
		restricts all hasEngine to SR14
	]

	concept CX-9 < Car [
		restricts all hasEngine to SR14
	]

	concept SR14 < Engine

	relation entity IsEngineOf [
		from Engine
		to Car
		forward isEngineOf
		reverse hasEngine
		functional
	]


	relation entity IsNavigationOf[
		from Navigation
		to Car
		forward isNavigationOf
		reverse hasNavigation
	]

	concept SeatBelt < mission:Component

	relation entity IsSeatBeltOf [
		from SeatBelt
		to Car
		forward isSeatBeltOf
		reverse hasSeatBelt
  ]
	concept Window < mission:Component
	relation entity IsWindowOf [
		from Window
		to Car
		forward isWindowOf
		reverse hasWindow
		functional

	]

	// concept Displacement < vim4:InherentUnitaryQuantity [
	// 	restricts vim4:instantiates to iso-80000-3.4:volume
	// ]

	concept LE9 < Engine


	// concept NaviData < vim4:UnitaryQuantityValue [
	// 	restricts vim4:instantiates to iso-80000-3.4:volume
	// 	restricts vim4:unit to metrology-description:cc
	// ]
concept NaviData <  mission:Component
	relation entity IsNaviDataOf [
		from NaviData
		to Navigation
		forward isNaviDataOf
		reverse hasNaviData
	] //< vim4:Characterizes

	concept Displacement < vim4:UnitaryQuantityValue [
		restricts vim4:instantiates to iso-80000-3.4:volume
		restricts vim4:unit to metrology-description:cc
	]

	relation entity IsDisplacementOf [
		from Displacement
		to Engine
		forward isDisplacementOf
		reverse hasDisplacement
	] < vim4:Characterizes




	concept Handle < mission:Component, vim4:Object [
		restricts hasMaterial to min 1
	]

    concept type01 < Handle

	relation entity IsHandleOf [
		from Handle
		to Car
		forward isHandleOf
		reverse hasHandle
		functional
	]

	concept Material < vim4:UnitaryQuantityValue [
		restricts vim4:instantiates to iso-80000-3.4:volume
		restricts vim4:unit to metrology-description:cc
	]


	relation entity IsMaterialOf [
		from Material
		to Handle
		forward isMaterialOf
		reverse hasMaterial
	] < vim4:Characterizes




// Requirementを満足しないDisplacementパラメータを識別 (SWRL判定結果識別用のコンセプト)
	concept notValidMaxDisplacementRequirement < Displacement

	// RequirementとValidation対象の関係性は自動で付与する
	rule specify-MaxDisplacementRequirement[
		Displacement(d) & MaxDisplacementRequirement(r)
		-> specifies(r,d)
	]
	// swrlbを用いて最大Displacementの要求を満足しない場合、要求にnotValidMaxDisplacementRequirementと識別。　（ReqとDの間の関係性を自動で付与）
	rule check-notValidMaxDisplacementRequirement[
		// v1 >= v2 -> valid, v1 <= v2 -> not Valid
		maxDisplacement(r1, v1) & specifies(r1, d2)
		 & vim4:hasDoubleNumber(d2,v2)
		  & builtIn (swrlb:lessThan, v1, v2)
		   -> notValidMaxDisplacementRequirement(d2)
	]

	concept MaxDisplacementRequirement < base:IdentifiedElement[//mission:Requirement[
		// restricts all mission:specifies to Displacement
	]
	relation entity Specifies[
		from MaxDisplacementRequirement
		to Displacement
		forward specifies
		reverse isSpecifiedBy
	]

	scalar property maxDisplacement[
		domain MaxDisplacementRequirement
		range xsd:double
		functional
	]

}